@page "/"
@using SentimentAnalysis.Data
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject IHttpClientFactory ClientFactory
@inject SentimentAnalysisService SentimentService

<PageTitle>Sentiment Analysis</PageTitle>

<h1>Sentiment Analysis</h1>

<p>Enter text into the first text box to classify it based on the estimated sentiment</p>

<div id="inputSection"></div>
<textarea @bind="InputSentence" @bind:event="oninput" id="sentimentInput" rows="4" cols="50" placeholder="Type your text here..."></textarea>
<button class="btn btn-primary" @onclick="ClassifyTextSentiment">Classify Text</button>

<div id="sentimentOutputSection"></div>
@if (sentiments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Row</th>
                <th>Text</th>
                <th>Sentiment</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentiment in sentiments)
            {
                <tr>
                    <td>@sentiments.IndexOf(sentiment)</td>
                    <td>@sentiment.Text</td>
                    <td>@sentiment.Sentiment</td>
                    <td>@sentiment.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <textarea @bind="DeletionIndex" @bind:event="oninput" id="deletionChoice" rows="3" cols="15" placeholder="Enter row number here..."></textarea>
    <button class="btn btn-primary" @onclick="DeleteSentiment">Delete Sentiment</button>
}



@code {
    private List<SentimentSet>? sentiments = null;
    SentimentSet? sentiment;
    private bool getSentimentsError;
    private bool sentimentsLive = false;

    public string InputSentence { get; set; } = string.Empty;
    public string DeletionIndex { get; set; } = string.Empty;

    protected async Task ClassifyTextSentiment()
    {
        StringBuilder sb = new StringBuilder("http://127.0.0.1:8000");
        if(!(InputSentence == string.Empty || InputSentence == "Type your text here..."))
        {
            sb.Append("/");
            sb.Append(InputSentence);
        }
        string analyzerConnection = sb.ToString();
        var request = new HttpRequestMessage(HttpMethod.Get, analyzerConnection);
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            if (!sentimentsLive)
            {
                sentiments = new List<SentimentSet>();
            }
            var responseStream = await response.Content.ReadAsStringAsync();
            string reString = responseStream.Replace(@"\", String.Empty);
            reString = reString.Remove(0, 1);
            reString = reString.Remove(reString.Length - 1, 1);
            //reString = @"{""text"": ""This is the default sentence"", ""sentiment"": ""Neutral"", ""value"": 0.755}";
            sentiment = JsonSerializer.Deserialize<SentimentSet>(reString);
            sentiments.Add(sentiment);
            sentimentsLive = true;
        }
        else
        {
            getSentimentsError = true;
        }
    }

    private void DeleteSentiment()
    {
        int index;
        if(Int32.TryParse(DeletionIndex, out index))
        {
            if(index >= 0 && index < sentiments.Count)
            {
                sentiments.RemoveAt(index);
            }
        }
    }

    //protected override async Task OnInitializedAsync()
    //{
    //    forecasts = await ForecastService.GetForecastAsync(DateOnly.FromDateTime(DateTime.Now));
    //}
}
