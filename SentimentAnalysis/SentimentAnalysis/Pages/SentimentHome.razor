@page "/"
@using SentimentAnalysis.Data
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject NavigationManager Nav
@inject IHttpClientFactory ClientFactory
@inject Services.AppData AppData

<PageTitle>Sentiment Analysis</PageTitle>

<h1>Sentiment Analysis</h1>

<p>Enter text into the first text box to classify it based on the estimated sentiment</p>

<div id="inputSection"></div>
<textarea @bind="InputSentence" @bind:event="oninput" id="sentimentInput" rows="4" cols="50" placeholder="Type your text here..."></textarea>
<button class="btn btn-primary" @onclick="ClassifyTextSentiment">Classify Text</button>

<div id="sentimentOutputSection"></div>
@if (sentimentsLive == false)
{
    <p><em>No sentiments exist...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Row</th>
                <th>Text</th>
                <th>Sentiment</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentiment in AppData.Sentiments)
            {
                <tr>
                    <td>@AppData.Sentiments.IndexOf(sentiment)</td>
                    <td>@sentiment.Text</td>
                    <td>@sentiment.Sentiment</td>
                    <td>@sentiment.Value</td>
                </tr>
            }
        </tbody>
    </table>

}



@code {
    SentimentSet? sentiment;
    private bool getSentimentsError;
    private bool sentimentsLive = false;

    public string InputSentence { get; set; } = string.Empty;

    protected override void OnAfterRender(bool firstRender)
    {
        if (AppData.Sentiments.Count > 0)
        {
            sentimentsLive = true;
        }
        else
        {
            sentimentsLive = false;
        }
        base.OnAfterRender(firstRender);
    }

    protected async Task ClassifyTextSentiment()
    {
        StringBuilder sb = new StringBuilder("http://analyzer:8000");
        //StringBuilder sb = new StringBuilder("http://localhost:8000");
        if(!(InputSentence == string.Empty || InputSentence == "Type your text here..."))
        {
            sb.Append("/");
            sb.Append(InputSentence);
        }
        string analyzerConnection = sb.ToString();
        var request = new HttpRequestMessage(HttpMethod.Get, analyzerConnection);
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            var responseStream = await response.Content.ReadAsStringAsync();
            string reString = responseStream.Replace(@"\", String.Empty);
            reString = reString.Remove(0, 1);
            reString = reString.Remove(reString.Length - 1, 1);
            //reString = @"{""text"": ""This is the default sentence"", ""sentiment"": ""Neutral"", ""value"": 0.755}";
            sentiment = JsonSerializer.Deserialize<SentimentSet>(reString);
            AppData.Sentiments.Add(sentiment);
            sentimentsLive = true;
        }
        else
        {
            getSentimentsError = true;
        }
    }
}
