@page "/administration"
@using SentimentAnalysis.Data
@using System.Text
@using System.Text.Json
@using System.Text.Json.Serialization
@inject NavigationManager Nav
@inject IHttpClientFactory ClientFactory
@inject Services.AppData AppData

<PageTitle>Sentiment Administration</PageTitle>

<h1>Sentiment Analysis | Admin View</h1>

<p>Enter text into the first text box to classify it based on the estimated sentiment</p>

<div id="inputSection"></div>
<textarea @bind="InputSentence" @bind:event="oninput" id="sentimentInput" rows="4" cols="50" placeholder="Type your text here..."></textarea>
<button class="btn btn-primary" @onclick="ClassifyTextSentiment">Classify Text</button>

@if (sentiments != null)
{
    <table class="table">
        <thead>
            <tr>
                <th>Avg. Sentiment</th>
                <th>Num. Positive</th>
                <th>Percent Positive</th>
                <th>Num. Negative</th>
                <th>Percent Negative</th>
                <th>Num. Neutral</th>
                <th>Percent Neutral</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@averageSentiment</td>
                <td>@positiveCount</td>
                <td>@positivePercent</td>
                <td>@negativeCount</td>
                <td>@negativePercent</td>
                <td>@neutralCount</td>
                <td>@neutralPercent</td>
            </tr>
        </tbody>
    </table>
}

<div id="sentimentOutputSection"></div>
@if (sentiments == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Row</th>
                <th>Text</th>
                <th>Sentiment</th>
                <th>Value</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var sentiment in sentiments)
            {
                <tr>
                    <td>@sentiments.IndexOf(sentiment)</td>
                    <td>@sentiment.Text</td>
                    <td>@sentiment.Sentiment</td>
                    <td>@sentiment.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <textarea @bind="ModIndex" @bind:event="oninput" id="modificationChoice" rows="3" cols="15" readonly="@IsReadOnly" placeholder="Enter row number here..."></textarea>
    <button class="btn btn-primary" @onclick="DeleteSentiment">Delete Sentiment</button>
    <button class="btn btn-primary" @onclick="EditSentiment">Edit Sentiment</button>

    @if(editing == true)
    {
        <textarea @bind="ModSentiment" @bind:event="oninput" id="sentimentModification" rows="3" cols="15" placeholder="@sentiments[Int32.Parse(ModIndex)].Sentiment"></textarea>
        <button class="btn btn-primary" @onclick="FinalizeEdit">OK</button>
        <button class="btn btn-primary" @onclick="CancelEdit">Cancel</button>
    }
}



@code {
    private List<SentimentSet>? sentiments = null;
    SentimentSet? sentiment;
    private bool getSentimentsError;
    private bool editing = false;
    private bool sentimentsLive = false;
    private string averageSentiment = string.Empty;
    private int positiveCount = 0;
    private double positivePercent = 0.0;
    private int negativeCount = 0;
    private double negativePercent = 0.0;
    private int neutralCount = 0;
    private double neutralPercent = 0.0;

    public string InputSentence { get; set; } = string.Empty;
    public string ModIndex { get; set; } = string.Empty;
    public string ModSentiment { get; set; } = string.Empty;

    protected bool IsReadOnly { get; set; } = false;

    protected override void OnAfterRender(bool firstRender)
    {
        if (AppData.LoggedIn != true)
        {
            Nav.NavigateTo("/login");
        }
        base.OnAfterRender(firstRender);
    }

    protected async Task ClassifyTextSentiment()
    {
        //StringBuilder sb = new StringBuilder("http://analyzer:8000");
        StringBuilder sb = new StringBuilder("http://localhost:8000");
        if (!(InputSentence == string.Empty || InputSentence == "Type your text here..."))
        {
            sb.Append("/");
            sb.Append(InputSentence);
        }
        string analyzerConnection = sb.ToString();
        var request = new HttpRequestMessage(HttpMethod.Get, analyzerConnection);
        request.Headers.Add("Accept", "application/json");

        var client = ClientFactory.CreateClient();

        var response = await client.SendAsync(request);

        if (response.IsSuccessStatusCode)
        {
            if (!sentimentsLive)
            {
                sentiments = new List<SentimentSet>();
            }
            var responseStream = await response.Content.ReadAsStringAsync();
            string reString = responseStream.Replace(@"\", String.Empty);
            reString = reString.Remove(0, 1);
            reString = reString.Remove(reString.Length - 1, 1);
            //reString = @"{""text"": ""This is the default sentence"", ""sentiment"": ""Neutral"", ""value"": 0.755}";
            sentiment = JsonSerializer.Deserialize<SentimentSet>(reString);
            sentiments.Add(sentiment);
            Analysis();
            sentimentsLive = true;
        }
        else
        {
            getSentimentsError = true;
        }
    }

    private void DeleteSentiment()
    {
        int index;
        if (Int32.TryParse(ModIndex, out index))
        {
            if (index >= 0 && index < sentiments.Count)
            {
                sentiments.RemoveAt(index);
                Analysis();
            }
        }
    }

    private void EditSentiment()
    {
        int index;
        if(Int32.TryParse(ModIndex, out index))
        {
            if (index >= 0 && index < sentiments.Count)
            {
                ModSentiment = sentiments[index].Sentiment;
                editing = true;
                IsReadOnly = true;
            }
        }
    }

    private void FinalizeEdit()
    {
        string newSentiment = ModSentiment;
        if (newSentiment != "Positive" && newSentiment != "Negative" && newSentiment != "Neutral")
        {
            editing = true;
        }
        else
        {
            sentiments[Int32.Parse(ModIndex)].Sentiment = newSentiment;
            editing = false;
            IsReadOnly = false;
        }
        Analysis();
    }

    private void CancelEdit()
    {
        editing = false;
        IsReadOnly = false;
        ModSentiment = String.Empty;
        Analysis();
    }

    private void Analysis()
    {
        positiveCount = 0;
        negativeCount = 0;
        neutralCount = 0;
        foreach(SentimentSet s in sentiments)
        {
            switch (s.Sentiment)
            {
                case ("Positive"):
                    positiveCount++;
                    break;
                case ("Negative"):
                    negativeCount++;
                    break;
                case ("Neutral"):
                    neutralCount++;
                    break;
            }
        }
        positivePercent = (double) ( (double) positiveCount / (double) sentiments.Count) * 100.0;
        negativePercent = (double) ( (double) negativeCount / (double) sentiments.Count) * 100.0;
        neutralPercent = (double) ( (double) neutralCount / (double) sentiments.Count) * 100.0;
        averageSentiment = "Positive";
        if(negativePercent > positivePercent)
        {
            averageSentiment = "Negative";
        }
        if(neutralPercent > negativePercent)
        {
            averageSentiment = "Neutral";
        }
    }
}